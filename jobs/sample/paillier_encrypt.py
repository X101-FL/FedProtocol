from encrypt.paillier import PaillierKeypair
import numpy as np

##################################################################################
# 初始化秘钥
##################################################################################
public_key, private_key = PaillierKeypair.generate_keypair(n_length=1024, precision=1e-8)

##################################################################################
# 加解密一个数字
##################################################################################
v1 = 3.53423455
ev1 = public_key.encrypt(v1)
dev1 = private_key.decrypt(ev1)
print(f"deviation : {abs(v1 - dev1)}")

##################################################################################
# 同态加法
##################################################################################
v2 = -1.245532
ev2 = public_key.encrypt(v2)
sum_of_ev = ev1 + ev2
print(f"deviation : {abs(v1 + v2 - private_key.decrypt(sum_of_ev))}")

##################################################################################
# 数值乘法
##################################################################################
scaled_ev1 = ev1 * 6.53242
print(f"deviatioin : {abs(v1 * 6.53242 - private_key.decrypt(scaled_ev1))}")

##################################################################################
# 加解密一个numpy向量、矩阵
##################################################################################
encrypt_func = np.frompyfunc(public_key.encrypt, 1, 1)
decrypt_func = np.frompyfunc(private_key.decrypt, 1, 1)

x1 = np.random.random((5, 5))
ex1 = encrypt_func(x1)
dex1 = decrypt_func(ex1)
print(f"deviation : {np.max(np.abs(x1 - dex1))}")

##################################################################################
# 密文矩阵与明文矩阵的乘法
##################################################################################
x2 = np.random.random((5, 5))
mul_of_ex = ex1 @ x2
print(f"deviation : {np.max(np.abs(x1 @ x2 - decrypt_func(mul_of_ex)))}")
